shell.prefix('set -x;')
import os
import yaml

with open('snakemake/default_config.yaml', 'r') as f:
    default_config = yaml.load(f)

default_config.update(config)
config = default_config

def require_variable(variable, condition=None):
    value = config.get(variable)
    if value is None:
        raise ValueError('configuration variable "{}" is required'.format(variable))
    if (condition == 'input_dir') and (not os.path.isdir(value)):
        raise ValueError('cannot find input directory {}: {}'.format(variable, value))
    elif (condition == 'input_file') and (not os.path.isfile(value)):
        raise ValueError('cannot find input file {}: {}'.format(variable, value))
    return value

root_dir = require_variable('root_dir', 'input_dir')
data_dir = require_variable('data_dir', 'input_dir')
genome_dir = require_variable('genome_dir', 'input_dir')
bin_dir = require_variable('bin_dir', 'input_dir')
output_dir = require_variable('output_dir')
rna_types = require_variable('rna_types')
tools_dir = require_variable('tools_dir')
temp_dir = require_variable('temp_dir')

# read sample ids from file
with open(os.path.join(data_dir, 'sample_ids.txt'), 'r') as f:
    sample_ids = f.read().split()
for sample_id in sample_ids:
    if '.' in sample_id:
        raise ValueError('"." is not allowed in sample ID: {}'.format(sample_id))

def get_preprocess_methods():
    preprocess_methods = []
    for batch_removal_method in config['batch_removal_methods']:
        if batch_removal_method == 'Combat':
            template = 'filter.{imputation_method}.Norm_{normalization_method}.Batch_{batch_removal_method}_{batch_index}'
            preprocess_methods += expand(template,
                output_dir=output_dir,
                imputation_method=config['imputation_methods'],
                normalization_method=config['normalization_methods'],
                batch_removal_method=batch_removal_method,
                batch_index=config['batch_indices'])
        else:
            template = 'filter.{imputation_method}.Norm_{normalization_method}.Batch_{batch_removal_method}'
            preprocess_methods += expand(template,
                output_dir=output_dir,
                imputation_method=config['imputation_methods'],
                normalization_method=config['normalization_methods'],
                batch_removal_method=batch_removal_method)
    return preprocess_methods

def auto_gzip_input(template):
    def get_filename(wildcards):
        original_names = expand(template, **wildcards)
        if all(os.path.exists(f) for f in original_names):
            return original_names
        gzip_names = expand(template + '.gz', **wildcards)
        if all(os.path.exists(f) for f in gzip_names):
            return gzip_names
    return get_filename

# template for nbconvert
nbconvert_command = '''cp {input.jupyter} {output.jupyter}
jupyter nbconvert --execute --to html \
    --HTMLExporter.exclude_code_cell=False \
    --HTMLExporter.exclude_input_prompt=True \
    --HTMLExporter.exclude_output_prompt=True \
    {output.jupyter}
'''

# export singularity wrappers
singularity_wrappers = config.get('singularity_wrappers')
if singularity_wrappers is not None:
    os.environ['PATH'] = singularity_wrappers + ':' + os.environ['PATH']

rule make_temp:
    output:
        temp_dir
    shell:
        'mkdir -p {output}'