shell.prefix('set -x;')
include: 'common.snakemake'

rule all:
    input:
        fastqc=expand('{output_dir}/fastqc/{sample_id}_fastqc.zip',
            output_dir=output_dir, sample_id=sample_ids),
        summarize_fastqc=expand('{output_dir}/summary/fastqc.txt',
            output_dir=output_dir),
        summarize_fastqc_html=expand('{output_dir}/summary/fastqc.html',
            output_dir=output_dir)

rule fastqc:
    input:
        data_dir + '/fastq/{sample_id}.fastq'
    output:
        html='{output_dir}/fastqc/{sample_id}_fastqc.html',
        zip='{output_dir}/fastqc/{sample_id}_fastqc.zip'
    params:
        output_prefix='{output_dir}/fastqc/',
        temp_dir=config['temp_dir']
    log:
        '{output_dir}/log/fastqc/{sample_id}'
    shell:
        '''fastqc -q -o {params.output_prefix} -d {params.temp_dir} {input}
        '''

def parse_fastqc_data(fp):
    section = None
    qc_status = OrderedDict()
    basic_statistics = OrderedDict()
    for line in fp:
        line = str(line, encoding='utf-8')
        line = line.strip()
        if line.startswith('>>'):
            if line == '>>END_MODULE':
                continue
            section, status = line[2:].split('\t')
            qc_status[section] = status
        else:
            if section == 'Basic Statistics':
                key, val = line.split('\t')
                basic_statistics[key] = val
    for key, val in qc_status.items():
        basic_statistics[key] = val
    return basic_statistics
        
rule summarize_fastqc:
    input:
        zip=lambda wildcards: expand('{output_dir}/fastqc/{sample_id}_fastqc.zip',
            output_dir=wildcards.output_dir, sample_id=sample_ids)
    output:
        '{output_dir}/summary/fastqc.txt'
    run:
        import pandas as pd
        from zipfile import ZipFile
        import os
        from collections import OrderedDict

        summary = OrderedDict()
        columns = None
        for filename in input.zip:
            sample_id = os.path.splitext(os.path.basename(filename))[0][:-7]
            with ZipFile(filename, 'r') as zf:
                with zf.open(sample_id + '_fastqc/fastqc_data.txt', 'r') as f:
                    summary[sample_id] = parse_fastqc_data(f)
                    if columns is None:
                        columns = list(summary[sample_id].keys())
        summary = pd.DataFrame.from_records(summary)
        summary = summary.T
        summary = summary.reindex(columns=columns)
        summary.index.name = 'sample_id'
        summary.to_csv(output[0], sep='\t', index=True, header=True) 

rule summarize_fastqc_ipynb:
    input:
        '{output_dir}/summary/fastqc.txt'
    output:
        ipynb='{output_dir}/summary/fastqc.ipynb'
    run:
        import nbformat
        from nbformat.v4 import new_notebook, new_code_cell, new_markdown_cell
        nb = new_notebook()
        nb['cells'].append(new_code_cell(r"""import pandas as pd
import numpy as np"""))

        nb['cells'].append(new_code_cell(r"""summary = pd.read_table('fastqc.txt', sep='\t')"""))
        nb['cells'].append(new_code_cell(r"""summary.set_index('sample_id', inplace=True, drop=False)
qc_status = summary.iloc[:, 9:].copy()
qc_status.fillna('NA')
qc_status = qc_status.astype('str')
sample_ids = qc_status.index.values
sections = qc_status.columns.values
def style_func(val):
    status, row, col = val.split('|')
    row, col = int(row), int(col)
    color = {'pass': 'green', 'fail': 'red', 'warn': 'orange'}.get(status, 'gray')
    return '<a href="../fastqc/{sample_id}_fastqc.html#M{section}" style="color: {color}">{status}</a>'.format(
        sample_id=sample_ids[row], color=color, status=status, section=col)

pd.DataFrame(qc_status.values \
             + '|' + np.arange(qc_status.shape[0]).astype('str')[:, np.newaxis] \
             + '|' + np.arange(qc_status.shape[1]).astype('str')[np.newaxis, :],
             index=qc_status.index, columns=qc_status.columns) \
    .style.format(style_func)"""))
        nb['metadata']['kernel_spec'] = {
            'display_name': 'Python 3',
            'language': 'python', 
            'name': 'python3'
        }
        nb['metadata']['laugnage_info'] = {
            'codemirror_mode': {
                'name': 'ipython',
                'version': 3
            },
            'name': 'python', 
            'file_extension': '.py', 
            'mimetype': 'text/x-python',
            'nbconvert_exporter': 'python',
            'version': '3.6'
        }
        nbformat.write(nb, output.ipynb)

rule summarize_fastqc_html:
    input:
        '{output_dir}/summary/fastqc.ipynb'
    output:
        '{output_dir}/summary/fastqc.html'
    shell:
        '''jupyter nbconvert --execute --to html \
            --HTMLExporter.exclude_code_cell=False \
            --HTMLExporter.exclude_input_prompt=True \
            --HTMLExporter.exclude_output_prompt=True \
            {input}
        '''
