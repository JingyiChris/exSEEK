shell.prefix('set -x; set -e;')
include: 'common.snakemake'

import yaml
with open(data_dir + '/compare_groups.yaml', 'r') as f:
    compare_groups = yaml.load(f)

count_method = config['count_method']
# read selected matrix preprocessing methods
with open(output_dir + '/select_preprocess_method/uca_score/{count_method}/selected_methods.txt'.format(**config), 'r') as f:
    preprocess_methods = f.read().split()


rule all:
    input:
        feature_selection=expand('{output_dir}/feature_selection/{preprocess_method}.{count_method}/{compare_group}/{classifier}.{n_select}.{select_method}',
            output_dir=output_dir, count_method=count_method, preprocess_method=preprocess_methods,
            classifier=config['classifiers'], select_method=config['select_methods'], 
            compare_group=list(compare_groups.keys()), n_select=config['n_selects']),
        preprocess_features=expand('{output_dir}/preprosess_features/{preprocess_method}.{count_method}.txt',
            output_dir=output_dir, count_method=count_method, preprocess_method=preprocess_methods)

            
rule preprocess_features:
    input:
        '{output_dir}/matrix_processing/{preprocess_method}.{count_method}.txt'
    output:
        '{output_dir}/preprosess_features/{preprocess_method}.{count_method}.txt'
    params:
        scaler=config['scale_method'],
        remove_zero_features=0.2,
        rpkm_top={True: '--rpkm-top 2000', False: '--expr-top 2000'}[config['small_rna']]
    shell:
        '''{bin_dir}/feature_selection.py preprocess_features -i {input} --scaler {params.scaler} \
            --use-log --transpose {params.rpkm_top} --remove-zero-features {params.remove_zero_features} -o {output}
        '''
    
rule select_features:
    input:
        matrix='{output_dir}/preprosess_features/{preprocess_method}.{count_method}.txt',
        sample_classes=data_dir+ '/sample_classes.txt'
    output:
        directory('{output_dir}/feature_selection/{preprocess_method}.{count_method}/{compare_group}/{classifier}.{n_select}.{select_method}')
    params:
        select_method=lambda wildcards: {'rfe': '--rfe --rfe-step 0.1 --rfe-resample-method jackknife --rfe-max-runs 50',
            'ranking': '',
            'robust': '--robust-select --robust-max-runs 10 --robust-resample-method jackknife --robust-jackknife-remove 0.1' }[wildcards.select_method],
        positive_class=lambda wildcards: compare_groups[wildcards.compare_group][1],
        negative_class=lambda wildcards: compare_groups[wildcards.compare_group][0],
        n_splits=config['cross_validation_splits'],
        splitter=config['cv_splitter']
    shell:
        '''{bin_dir}/feature_selection.py evaluate -i {input.matrix} \
            --sample-classes {input.sample_classes} \
            --positive-class '{params.positive_class}' --negative-class '{params.negative_class}' \
            --method {wildcards.classifier} --n-select {wildcards.n_select} \
            --splitter {params.splitter} \
            {params.select_method} \
            --n-splits {params.n_splits} \
            --compute-sample-weight \
            -o {output}
        '''


