shell.prefix('set -x; set -e;')
include: 'common.snakemake'

import yaml
import re
with open(data_dir + '/compare_groups.yaml', 'r') as f:
    compare_groups = yaml.load(f)

count_method = config['count_method']
# read selected matrix preprocessing methods
if not isinstance(config['count_method'], list):
    count_methods = [config['count_method']]
else:
    count_methods = config['count_method']

def get_all_inputs(wildcards):
    inputs = []
    for count_method in count_methods:
        with open(output_dir + '/select_preprocess_method/uca_score/{count_method}/selected_methods.txt'.format(count_method=count_method), 'r') as f:
            preprocess_methods = f.read().split()
        # feature_selection
        #inputs += expand('{output_dir}/feature_selection/{preprocess_method}.{count_method}/{compare_group}/{classifier}.{n_select}.{select_method}',
        #    output_dir=output_dir, count_method=count_method, preprocess_method=preprocess_methods,
        #    classifier=config['classifiers'], select_method=config['select_methods'], 
        #    compare_group=list(compare_groups.keys()), n_select=config['n_selects'])
        # cross_validation
        inputs += expand('{output_dir}/cross_validation/{preprocess_method}.{count_method}/{compare_group}/{classifier}.{n_select}.{select_method}.{fold_change_filter_direction}',
            output_dir=output_dir, count_method=count_method, preprocess_method=preprocess_methods,
            classifier=config['classifier'], select_method=config['selector'], 
            compare_group=list(compare_groups.keys()), n_select=config['n_selects'], fold_change_filter_direction=config['fold_change_filter_direction'])
        # preprocess_features
        #inputs += expand('{output_dir}/preprosess_features/{preprocess_method}.{count_method}.txt',
        #    output_dir=output_dir, count_method=count_method, preprocess_method=preprocess_methods)
        # evaluate single features
        #inputs += expand('{output_dir}/evaluate_single_features/{preprocess_method}.{count_method}/{compare_group}.txt',
        #    output_dir=output_dir, count_method=count_method, preprocess_method=preprocess_methods, compare_group=list(compare_groups.keys()))
    return inputs
        
rule all:
    input:
        get_all_inputs

            
rule preprocess_features:
    input:
        '{output_dir}/matrix_processing/{preprocess_method}.{count_method}.txt'
    output:
        '{output_dir}/preprosess_features/{preprocess_method}.{count_method}.txt'
    params:
        scaler=config['scale_method'],
        remove_zero_features=0.2,
        rpkm_top={True: '--rpkm-top 2000', False: '--expr-top 2000'}[config['small_rna']]
    shell:
        '''{bin_dir}/feature_selection.py preprocess_features -i {input} --scaler {params.scaler} \
            --use-log --transpose {params.rpkm_top} --remove-zero-features {params.remove_zero_features} -o {output}
        '''
    
rule select_features:
    input:
        matrix='{output_dir}/preprosess_features/{preprocess_method}.{count_method}.txt',
        sample_classes=data_dir+ '/sample_classes.txt'
    output:
        directory('{output_dir}/feature_selection/{preprocess_method}.{count_method}/{compare_group}/{classifier}.{n_select}.{select_method}')
    params:
        select_method=lambda wildcards: {'rfe': '--rfe --rfe-step 0.1 --rfe-resample-method jackknife --rfe-max-runs 50',
            'ranking': '',
            'robust': '--robust-select --robust-max-runs 10 --robust-resample-method jackknife --robust-jackknife-remove 0.1' }[wildcards.select_method],
        positive_class=lambda wildcards: compare_groups[wildcards.compare_group][1],
        negative_class=lambda wildcards: compare_groups[wildcards.compare_group][0],
        n_splits=config['cross_validation_splits'],
        splitter=config['cv_splitter']
    shell:
        '''{bin_dir}/feature_selection.py evaluate -i {input.matrix} \
            --sample-classes {input.sample_classes} \
            --positive-class '{params.positive_class}' --negative-class '{params.negative_class}' \
            --method {wildcards.classifier} --n-select {wildcards.n_select} \
            --splitter {params.splitter} \
            {params.select_method} \
            --n-splits {params.n_splits} \
            --compute-sample-weight \
            -o {output}
        '''

rule calc_rpkm:
    input:
        '{output_dir}/matrix_processing/{preprocess_method}.{count_method}.txt'
    output:
        '{output_dir}/rpkm/{preprocess_method}.{count_method}.txt'
    shell:
        '''{bin_dir}/preprocess.py calc_rpkm -i {input} -o {output}
        '''

def get_input_matrix(wildcards):
    # Use RPM for small RNA
    if config['small_rna']:
        return '{output_dir}/matrix_processing/{preprocess_method}.{count_method}.txt'.format(**wildcards)
    # Use RPKM for long RNA
    else:
        return '{output_dir}/rpkm/{preprocess_method}.{count_method}.txt'.format(**wildcards)

rule cross_validation:
    input:
        matrix=get_input_matrix,
        sample_classes=data_dir+ '/sample_classes.txt'
    output:
        directory('{output_dir}/cross_validation/{preprocess_method}.{count_method}/{compare_group}/{classifier}.{n_select}.{selector}.{fold_change_filter_direction}')
    run:
        import json
        import os
        import subprocess
        from shlex import quote
        from copy import deepcopy

        fold_change_params = deepcopy(config.get('fold_change_filter_params', {}))
        fold_change_params['direction'] = wildcards.fold_change_filter_direction
        command = [
            os.path.join(config['bin_dir'], 'machine_learning.py'), 'cross_validation',
            '--matrix', input.matrix,
            '--sample-classes', input.sample_classes,
            '--output-dir', output[0],
            '--transpose',
            '--positive-class', compare_groups[wildcards.compare_group][1],
            '--negative-class', compare_groups[wildcards.compare_group][0],
            '--cv-params', json.dumps(config['cv_params'])
        ]
        if config['fold_change_filter']:
            command += ['--fold-change-filter', '--fold-change-filter-params', json.dumps(fold_change_params)]
        if config['zero_fraction_filter']:
            command += ['--zero-fraction-filter', '--zero-fraction-filter-params', json.dumps(config['zero_fraction_filter_params'])]
        if config['log_transform']:
            command += ['--log-transform', '--log-transform-params', json.dumps(config['log_transform_params'])]
        if config['scaler']:
            command += ['--scaler', config['scaler'], '--scaler-params', json.dumps(config['scaler_params'].get(config['scaler'], {}))]
        if config['selector']:
            command += ['--selector', wildcards.selector, '--selector-params', json.dumps(config['selector_params'].get(wildcards.selector, {})),
                '--n-features-to-select', wildcards.n_select]
        if config['grid_search']:
            command += ['--grid-search', '--grid-search-params', json.dumps(config['grid_search_params'])]
        if config['sample_weight']:
            command += ['--sample-weight', config['sample_weight']]
        command += ['--classifier', wildcards.classifier, '--classifier-params', json.dumps(config['classifier_params'].get(wildcards.classifier, {}))]
        command = list(map(str, command))
        print(' '.join(map(quote, command)))
        subprocess.check_call(command)


rule evaluate_single_features:
    input:
        matrix='{output_dir}/preprosess_features/{preprocess_method}.{count_method}.txt',
        sample_classes=data_dir+ '/sample_classes.txt'
    output:
        '{output_dir}/evaluate_single_features/{preprocess_method}.{count_method}/{compare_group}.txt'
    params:
        positive_class=lambda wildcards: compare_groups[wildcards.compare_group][1],
        negative_class=lambda wildcards: compare_groups[wildcards.compare_group][0]
    shell:
        '''{bin_dir}/feature_selection.py evaluate_single_features -i {input.matrix} \
            --sample-classes {input.sample_classes} \
            --positive-class '{params.positive_class}' --negative-class '{params.negative_class}' \
            -o {output}
        '''


