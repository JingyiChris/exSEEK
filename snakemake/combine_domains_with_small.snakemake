include: 'common.snakemake'

rule all:
    input:
        '{output_dir}/count_matrix/domains_combined.txt'

rule combine_full_length_and_domain:
    input:
        full_length='{output_dir}/count_matrix/transcript.txt',
        domain_long='{output_dir}/count_matrix/domains_long.txt',
        transcript_table=genome_dir + '/transcript_table/all.txt'
    output:
        '{output_dir}/count_matrix/domains_combined.txt'
    run:
        import pandas as pd

        transcript_table = pd.read_table(input.transcript_table, sep='\t')
        transcript_table.drop_duplicates('transcript_id', inplace=True)
        transcript_table.set_index('transcript_id', drop=False, inplace=True)

        # fill attributes of full length to 7 fields
        full_length = pd.read_table(input.full_length, sep='\t', index_col=0)
        full_length_features = full_length.index.to_series().str.split('|', expand=True)
        full_length_features.columns = ['gene_id', 'gene_type', 'gene_name', 'domain_id', 'transcript_id', 'start', 'end']
        # select small RNA transcripts
        full_length_features = full_length_features.query('(gene_type == "miRNA") or (gene_type == "piRNA")')
        full_length = full_length.loc[full_length_features.index.values]
        gene_length = (transcript_table['end'] - transcript_table['start']).astype('str')

        domain_long = pd.read_table(input.domain_long, sep='\t', index_col=0)
        #domain_long_features = domain_long.index.to_series().str.split('|', expand=True)
        #domain_long_features.columns = ['gene_id', 'gene_type', 'gene_name', 'domain_id', 'transcript_id', 'start', 'end']

        combined = pd.concat([full_length, domain_long], axis=0)
        combined.index.name = 'feature'
        combined.to_csv(output[0], sep='\t', index=True, header=True, na_rep='NA')