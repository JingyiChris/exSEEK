# input feature matrix (rows are samples and columns are features
matrix: null
# input file containing sample classes with 2 columns: sample_id, sample_class
sample_classes: null
# labels to treat as positive samples
positive_class: null
# labels to treat as negative samples
negative_class: null
# only use features defined in the file
features: null
# Transpose the matrix before machine learning
# By default, rows are samples and columns are features
transpose: true
n_features_to_select: 10
preprocess_steps:
    # remove features with fraction of zero values higher than a threshold
    - zero_fraction:
        name: zero_fraction
        type: selector
        enabled: false
    # select features by differential expression
    - diffexp_filter:
        name: diffexp_filter
        type: selector
        enabled: false
        params:
            method: deseq2
            score_type: pi_value
            fold_change_direction: any
            script: 'differential_expression.R'
            temp_dir: null
    # apply log transformation
    - log_transform:
        name: LogTransform
        type: transformer
        enabled: true
        params:
            base: 2
            pseudo_count: 1
    # method to scale features across samples
    - scale_features:
        name: StandardScaler
        type: scaler
        enabled: true
        params:
            with_mean: true
    # sophisticated feature selection
    - feature_selection:
        name: SIS
        enabled: false
        type: selector
        params:
            temp_dir: tmp/sis/SIS
            sis_params:
                family: binomial
                tune: bic
                penalty: lasso
                nsis: 10
    - feature_selection:
        name: ReliefF
        type: selector
        enabled: false
        params:
            n_jobs: 1
    - feature_selection:
        name: SURF
        type: selector
        enabled: false
        params:
            n_jobs: 1
    - feature_selection:
        name: MultiSURF
        type: selector
        enabled: true
        params:
            n_jobs: 1
    - feature_selection:
        MaxFeatures_ElasticNet:
        name: MaxFeatures
        type: selector
        params:
            classifier: SGDClassifier
            classifier_params:
                penalty: elastic
        grid_search: true
        grid_search_params:
            param_grid:
            alpha: [0.00001, 0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000]
            l1_ratio: [0.15, 0.30, 0.45, 0.60, 0.75, 0.90]

classifier: LogisticRegression
# parameters for classifier
classifier_params:
    penalty: l2
    solver: liblinear

# grid search for hyper-parameters of the classifier
grid_search: false
grid_search_params:
    # parameter grid that defines possible values for each parameter
    param_grid:
        C: [0.00001, 0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000]
    # cross-validation parameters for grid search
    cv:
        splitter: StratifiedShuffleSplit
        n_splits: 5
        test_size: 0.1
    iid: false
    scoring: roc_auc

# cross-validation parameters for performance evaluation
cv_params:
    splitter: StratifiedShuffleSplit
    # number of train-test splits for cross-validation
    n_splits: 2
    # number or proportion of samples to use as test set
    test_size: 0.1
    # scoring metric for performance evaluation
    scoring: roc_auc
# method for computing sample weight
#   balanced: compute sample weight from data such that classes are balanced
sample_weight: balanced